<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<parent>
		<groupId>com.redhat.ukiservices</groupId>
		<artifactId>parent</artifactId>
		<version>1.0-SNAPSHOT</version>
	</parent>

	<modelVersion>4.0.0</modelVersion>

	<artifactId>common</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>Red Hat :: UKI Services :: Common Module</name>
	<description>Module for common elements that exist between projects</description>

	<dependencies>

		<dependency>
			<groupId>io.fabric8.mq</groupId>
			<artifactId>camel-amq</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-core</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-jaxb</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-cdi</artifactId>
		</dependency>


		<!-- cdi api -->
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>io.fabric8</groupId>
			<artifactId>fabric8-cdi</artifactId>
		</dependency>

		<!-- Import the infinispan core -->
		<dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-core</artifactId>
		</dependency>

		<dependency>
			<groupId>javax.cache</groupId>
			<artifactId>cache-api</artifactId>
			<version>${cache-api.version}</version>
		</dependency>

		<!-- Import the Infinispan client hotrod -->
		<dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-client-hotrod</artifactId>
		</dependency>


		<dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-query-dsl</artifactId>
		</dependency>

		<dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-remote-query-client</artifactId>
		</dependency>

		<!-- Import the Infinispan query api -->
		<dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-query</artifactId>
		</dependency>

		<!-- need to use a CDI container such as JBoss Weld -->
		<!-- lets use weld for CDI -->
		<dependency>
			<groupId>org.jboss.weld.se</groupId>
			<artifactId>weld-se</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jboss.weld</groupId>
			<artifactId>weld-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.deltaspike.cdictrl</groupId>
			<artifactId>deltaspike-cdictrl-weld</artifactId>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
		</dependency>

		<!-- testing -->
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.fabric8</groupId>
			<artifactId>fabric8-arquillian</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-impl-maven</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.codehaus.plexus</groupId>
			<artifactId>plexus-utils</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>


	<build>
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<!-- Compiler plugin enforces Java 1.8 compatibility and activates annotation 
				processors -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.3</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<!-- Default sample commands: mvn -Pf8-build ... build Docker images and 
		create OpenShift deployment configs mvn -Pf8-deploy ... f8-build + push to 
		Docker registry + applying deployment config to OpenShift mvn -Pf8-local-deploy 
		... deployment for a single node setup without pushing to a registry For 
		individual goal usage please consult the fabric8 documentation -->
	<profiles>
		<profile>
			<id>generate-jaxb</id>
			<build>
				<defaultGoal>clean compile</defaultGoal>

				<pluginManagement>
					<plugins>
						<!-- If we e.g. execute on JDK 1.8, we should compile for Java 8 to 
							get the same (or higher) JAXB API version as used during the xjc execution. -->
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-compiler-plugin</artifactId>
							<configuration>
								<source>1.8</source>
								<target>1.8</target>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>

				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>jaxb2-maven-plugin</artifactId>
						<version>2.2</version>
						<executions>
							<execution>
								<id>model</id>
								<goals>
									<goal>xjc</goal>
								</goals>
								<configuration>
									<packageName>com.redhat.ukiservices.etl.model.jaxb</packageName>
									<clearOutputDir>true</clearOutputDir>
									<outputDirectory>${project.build.directory}/generated-sources/jaxb/model</outputDirectory>
									<sources>
										<source>src/main/resources/schemas/rttiPPTSchema_v12.xsd</source>
									</sources>
									<laxSchemaValidation>true</laxSchemaValidation>
								</configuration>
							</execution>
							<execution>
								<id>ref</id>
								<goals>
									<goal>xjc</goal>
								</goals>
								<configuration>
									<packageName>com.redhat.ukiservices.etl.model.jaxb.ref</packageName>
									<clearOutputDir>true</clearOutputDir>
									<outputDirectory>${project.build.directory}/generated-sources/jaxb/ref</outputDirectory>
									<sources>
										<source>src/main/resources/schemas/ref/rttiCTTReferenceSchema_v3.xsd</source>
									</sources>
									<laxSchemaValidation>true</laxSchemaValidation>
								</configuration>
							</execution>
						</executions>
					</plugin>


				</plugins>
			</build>
		</profile>
	</profiles>

</project>
