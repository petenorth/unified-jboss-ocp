<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<parent>
		<groupId>com.redhat.ukiservices</groupId>
		<artifactId>parent</artifactId>
		<version>1.0-SNAPSHOT</version>
	</parent>
	
	<modelVersion>4.0.0</modelVersion>

	<artifactId>ingest</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>Red Hat :: UKI Services :: Data Ingest Module</name>
	<description>Camel route receiving external data feed, and putting the messages on an A-MQ instance</description>

	<dependencies>

		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-stomp</artifactId>
		</dependency>

		<dependency>
			<groupId>io.fabric8.mq</groupId>
			<artifactId>camel-amq</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-core</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-cdi</artifactId>
		</dependency>

		<!-- cdi api -->
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>io.fabric8</groupId>
			<artifactId>fabric8-cdi</artifactId>
		</dependency>

		<!-- need to use a CDI container such as JBoss Weld -->
		<!-- lets use weld for CDI -->
		<dependency>
			<groupId>org.jboss.weld.se</groupId>
			<artifactId>weld-se</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jboss.weld</groupId>
			<artifactId>weld-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.deltaspike.cdictrl</groupId>
			<artifactId>deltaspike-cdictrl-weld</artifactId>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
		</dependency>

		<!-- testing -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.fabric8</groupId>
			<artifactId>fabric8-arquillian</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-impl-maven</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.codehaus.plexus</groupId>
			<artifactId>plexus-utils</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>


	<build>
		<finalName>${project.artifactId}</finalName>

		<plugins>
			<!-- Compiler plugin enforces Java 1.8 compatibility and activates annotation 
				processors -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.3</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.18.1</version>
				<inherited>true</inherited>
				<configuration>
					<excludes>
						<exclude>**/*KT.java</exclude>
					</excludes>
				</configuration>
			</plugin>

			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>fabric8-maven-plugin</artifactId>
				<version>${fabric8.version}</version>
				<executions>
					<execution>
						<id>json</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>json</goal>
						</goals>
					</execution>
					<execution>
						<id>attach</id>
						<phase>package</phase>
						<goals>
							<goal>attach</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>hawt-app-maven-plugin</artifactId>
				<version>${fabric8.version}</version>
				<executions>
					<execution>
						<id>hawt-app</id>
						<goals>
							<goal>build</goal>
						</goals>
						<configuration>
							<javaMainClass>org.apache.camel.cdi.Main</javaMainClass>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.jolokia</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>${docker.maven.plugin.version}</version>
				<configuration>
					<images>
						<image>
							<name>${docker.image}</name>
							<build>
								<from>${docker.from}</from>
								<assembly>
									<basedir>/deployments</basedir>
									<descriptorRef>hawt-app</descriptorRef>
								</assembly>
								<env>
									<JAVA_LIB_DIR>/deployments/lib</JAVA_LIB_DIR>
									<JAVA_MAIN_CLASS>org.apache.camel.cdi.Main</JAVA_MAIN_CLASS>
								</env>
							</build>
						</image>
					</images>
				</configuration>
			</plugin>

			<!-- allows the route to be ran via 'mvn exec:java' -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.4.0</version>
				<configuration>
					<mainClass>org.apache.camel.cdi.Main</mainClass>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<!-- Default sample commands: mvn -Pf8-build ... build Docker images and 
		create OpenShift deployment configs mvn -Pf8-deploy ... f8-build + push to 
		Docker registry + applying deployment config to OpenShift mvn -Pf8-local-deploy 
		... deployment for a single node setup without pushing to a registry For 
		individual goal usage please consult the fabric8 documentation -->
	<profiles>
		<profile>
			<id>f8-build</id>
			<build>
				<defaultGoal>clean install docker:build fabric8:json</defaultGoal>
			</build>
		</profile>
		<profile>
			<id>f8-deploy</id>
			<properties>
				<fabric8.imagePullPolicySnapshot>Always</fabric8.imagePullPolicySnapshot>
				<fabric8.recreate>true</fabric8.recreate>
			</properties>
			<build>
				<defaultGoal>clean install docker:build docker:push fabric8:json fabric8:apply</defaultGoal>
			</build>
		</profile>
		<profile>
			<id>f8-local-deploy</id>
			<properties>
				<fabric8.recreate>true</fabric8.recreate>
			</properties>
			<build>
				<defaultGoal>clean install docker:build fabric8:json fabric8:apply</defaultGoal>
			</build>
		</profile>
	</profiles>

</project>
